Timer unit: 1e-07 s

Total time: 0.0816396 s
File: <ipython-input-65-f28106b236f3>
Function: metropolis_hastings at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               def metropolis_hastings(self, X, y, semilla):
    46                                                   '''
    47                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
    48                                                   '''
    49                                           
    50                                                   # asegura replicabilidad
    51         1        230.0    230.0      0.0          np.random.seed(semilla)
    52                                           
    53                                                   # obtiene distribucion a priori y candidatos
    54         1       6731.0   6731.0      0.8          distribucion_priori = self.get_priori()
    55         1      16457.0  16457.0      2.0          W_candidatos = self.get_metropolis_hastings_candidatos()
    56         1        204.0    204.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    57                                           
    58                                                   # contador de candidatos aceptados
    59         1         10.0     10.0      0.0          aceptados = 0
    60                                           
    61        11        347.0     31.5      0.0          for i, w_candidato in enumerate(W_candidatos):
    62                                           
    63                                                       # localiza distribucion candidatos en w_actual
    64        10        124.0     12.4      0.0              w_actual = self.traza[i]
    65        10       1217.0    121.7      0.1              w_candidato += w_actual
    66                                           
    67                                                       # calcula prior
    68        10       8316.0    831.6      1.0              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    69        10       4667.0    466.7      0.6                  distribucion_priori.logpdf(w_actual)
    70                                           
    71                                                       # calcula verosimilitud
    72        10     395845.0  39584.5     48.5              delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - \
    73        10     380531.0  38053.1     46.6                  self._log_verosimilitud(w_actual, X, y)
    74                                           
    75                                                       # probabilidad de aceptacion
    76        10        698.0     69.8      0.1              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    77                                           
    78        10        400.0     40.0      0.0              if U_aceptacion[i] < p_aceptacion:
    79                                           
    80                                                           # actualiza valor actual y contador de aceptados
    81                                                           w_actual = w_candidato
    82                                                           aceptados += 1
    83                                           
    84        10        594.0     59.4      0.1              self.traza[i+1] = w_actual
    85                                           
    86                                                   # almacena la proporcion de candidatos aceptados
    87         1         25.0     25.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras