Timer unit: 1e-07 s

Total time: 0.101188 s
File: <ipython-input-7-f28106b236f3>
Function: metropolis_hastings at line 45

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    45                                               def metropolis_hastings(self, X, y, semilla):
    46                                                   '''
    47                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
    48                                                   '''
    49                                           
    50                                                   # asegura replicabilidad
    51         1        126.0    126.0      0.0          np.random.seed(semilla)
    52                                           
    53                                                   # obtiene distribucion a priori y candidatos
    54         1       5257.0   5257.0      0.5          distribucion_priori = self.get_priori()
    55         1      16764.0  16764.0      1.7          W_candidatos = self.get_metropolis_hastings_candidatos()
    56         1        223.0    223.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    57                                           
    58                                                   # contador de candidatos aceptados
    59         1          8.0      8.0      0.0          aceptados = 0
    60                                           
    61        11        263.0     23.9      0.0          for i, w_candidato in enumerate(W_candidatos):
    62                                           
    63                                                       # localiza distribucion candidatos en w_actual
    64        10        141.0     14.1      0.0              w_actual = self.traza[i]
    65        10        659.0     65.9      0.1              w_candidato += w_actual
    66                                           
    67                                                       # calcula prior
    68        10       7718.0    771.8      0.8              delta_prior = distribucion_priori.logpdf(w_candidato) - \
    69        10       5349.0    534.9      0.5                  distribucion_priori.logpdf(w_actual)
    70                                           
    71                                                       # calcula verosimilitud
    72        10     486932.0  48693.2     48.1              delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - \
    73        10     487001.0  48700.1     48.1                  self._log_verosimilitud(w_actual, X, y)
    74                                           
    75                                                       # probabilidad de aceptacion
    76        10        619.0     61.9      0.1              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    77                                           
    78        10        357.0     35.7      0.0              if U_aceptacion[i] < p_aceptacion:
    79                                           
    80                                                           # actualiza valor actual y contador de aceptados
    81                                                           w_actual = w_candidato
    82                                                           aceptados += 1
    83                                           
    84        10        440.0     44.0      0.0              self.traza[i+1] = w_actual
    85                                           
    86                                                   # almacena la proporcion de candidatos aceptados
    87         1         23.0     23.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras