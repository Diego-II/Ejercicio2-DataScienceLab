Timer unit: 1e-07 s

Total time: 0.0588827 s
File: <ipython-input-11-dc134ce4b724>
Function: metropolis_hastings at line 3

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     3                                               def metropolis_hastings(self, X, y, semilla):
     4                                                   '''
     5                                                   Muestrea el espacio de los parametros mediante Metropolis-Hastings
     6                                                   '''
     7                                                   # asegura replicabilidad
     8         1        108.0    108.0      0.0          np.random.seed(semilla)
     9                                           
    10                                                   # obtiene distribucion a priori y candidatos
    11         1       6178.0   6178.0      1.0          distribucion_priori = self.get_priori()
    12         1      11142.0  11142.0      1.9          W_candidatos = self.get_metropolis_hastings_candidatos()
    13         1        112.0    112.0      0.0          U_aceptacion = self.get_metropolis_hastings_uniformes()
    14                                           
    15                                                   # contador de candidatos aceptados
    16         1          6.0      6.0      0.0          aceptados = 0
    17                                                   
    18                                                   #variable auxiliar
    19         1          5.0      5.0      0.0          V=3
    20         1          7.0      7.0      0.0          aux_candidato=[None,None]
    21         1          5.0      5.0      0.0          aux_actual=[None,None]
    22                                                   
    23                                           
    24        11        291.0     26.5      0.0          for i, w_candidato in enumerate(W_candidatos):
    25                                                       
    26                                           
    27                                                       # localiza distribucion candidatos en w_actual
    28        10        140.0     14.0      0.0              w_actual = self.traza[i]
    29        10        658.0     65.8      0.1              w_candidato += w_actual
    30                                                       
    31                                                       
    32        10         97.0      9.7      0.0              if V==1:
    33                                                           # calcula prior
    34                                                           delta_prior = distribucion_priori.logpdf(w_candidato) - \
    35                                                               aux_candidato[0]
    36                                                           # calcula verosimilitud
    37                                                           delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - \
    38                                                               aux_candidato[1]
    39        10         79.0      7.9      0.0              if V==2:
    40                                                           # calcula prior
    41         9       6947.0    771.9      1.2                  delta_prior = distribucion_priori.logpdf(w_candidato) - \
    42         9        169.0     18.8      0.0                      aux_actual[0]
    43                                                           # calcula verosimilitud
    44         9     475812.0  52868.0     80.8                  delta_verosimilitud = self._log_verosimilitud(w_candidato, X, y) - \
    45         9        382.0     42.4      0.1                      aux_actual[1]
    46                                                           
    47                                                       else:
    48                                                           # calcula prior
    49         1        427.0    427.0      0.1                  aux_candidato[0]=distribucion_priori.logpdf(w_candidato)
    50         1        313.0    313.0      0.1                  aux_actual[0]=distribucion_priori.logpdf(w_actual)
    51         1          7.0      7.0      0.0                  delta_prior = aux_candidato[0] - \
    52         1          8.0      8.0      0.0                      aux_actual[0]
    53                                                           # calcula verosimilitud
    54         1      42468.0  42468.0      7.2                  aux_candidato[1]=self._log_verosimilitud(w_candidato, X, y)
    55         1      41961.0  41961.0      7.1                  aux_actual[1]=self._log_verosimilitud(w_actual, X, y)
    56         1         24.0     24.0      0.0                  delta_verosimilitud = aux_candidato[1] - \
    57         1         20.0     20.0      0.0                      aux_actual[1]
    58                                                           
    59                                           
    60                                                       # probabilidad de aceptacion
    61        10        508.0     50.8      0.1              p_aceptacion = math.exp(delta_verosimilitud + delta_prior)
    62                                           
    63        10        373.0     37.3      0.1              if U_aceptacion[i] < p_aceptacion:
    64                                           
    65                                                           # actualiza valor actual y contador de aceptados
    66                                                           w_actual = w_candidato
    67                                                           aceptados += 1
    68                                                           V=1
    69        10         90.0      9.0      0.0              else: V=2
    70                                           
    71        10        456.0     45.6      0.1              self.traza[i+1] = w_actual
    72                                           
    73                                                   # almacena la proporcion de candidatos aceptados
    74         1         34.0     34.0      0.0          self.proporcion_aceptacion = aceptados / self.n_muestras